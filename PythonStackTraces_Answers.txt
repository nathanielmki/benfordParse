StackTraces - Nathaniel Maki

Traceback Problem 1
===================
Traceback (most recent call last):
  File "stack_traces.py", line 36, in run_trace
    f()
  File "stack_traces.py", line 45, in <lambda>
    run_trace(1, lambda: perform_calculation(add, '1', 3))
  File "stack_traces.py", line 8, in perform_calculation
    calc(x, y)
  File "stack_traces.py", line 12, in add
    return x + y
TypeError: can only concatenate str (not "int") to str

Solution 1
==========
There is a type mismatch present in perform_calculation(), 
either '1' (x) should be cast as an integer of 1, or 3 (y) should be cast as a string '3'.

I would jump to line 45 first.


Traceback Problem 2
===================
Traceback (most recent call last):
  File "stack_traces.py", line 36, in run_trace
    f()
  File "stack_traces.py", line 46, in <lambda>
    run_trace(2, lambda: perform_calculation(add, 7, '3'))
  File "stack_traces.py", line 8, in perform_calculation
    calc(x, y)
  File "stack_traces.py", line 12, in add
    return x + y
TypeError: unsupported operand type(s) for +: 'int' and 'str'

Solution 2
==========
Similar to Problem 1, in that there is a type mismatch.
The variation in output is due to perform_calculation() encountering an int first (x),
and so throws an error when attempting to perform addition between an int (x) and a string (y).
The fix would be the same, either recast x to be a string, or y to be an int.

I would jump to line 46 first.


Traceback Problem 3
===================
Traceback (most recent call last):
  File "stack_traces.py", line 36, in run_trace
    f()
  File "stack_traces.py", line 47, in <lambda>
    run_trace(3, lambda: perform_calculation(mult, '3', '3'))
  File "stack_traces.py", line 8, in perform_calculation
    calc(x, y)
  File "stack_traces.py", line 15, in mult
    return x * y
TypeError: can't multiply sequence by non-int of type 'str'

Solution 3
==========
You're unable to multiply a string by a string in Python,
you'd need to recast either x or y to be an int,
then it should execute fine. TypeError is fairly clear;
unable to multiply sequence (string) by non-int (in this case a string)

I would jump to line 47 first.


Traceback Problem 4
===================
Traceback (most recent call last):
  File "stack_traces.py", line 36, in run_trace
    f()
  File "stack_traces.py", line 48, in <lambda>
    run_trace(4, lambda: perform_calculation(mult, [4], [3]))
  File "stack_traces.py", line 8, in perform_calculation
    calc(x, y)
  File "stack_traces.py", line 15, in mult
    return x * y
TypeError: can't multiply sequence by non-int of type 'list'

Solution 4
==========
You cannot multiply a list by a list. 
You'd need to recast either x or y to an int for multiplication
to take place. 

I would jump to line 48 first.


Traceback Problem 5
===================
Traceback (most recent call last):
  File "stack_traces.py", line 36, in run_trace
    f()
  File "stack_traces.py", line 49, in <lambda>
    run_trace(5, lambda: perform_calculation(innoc, '1', 3))
  File "stack_traces.py", line 8, in perform_calculation
    calc(x, y)
  File "stack_traces.py", line 22, in innoc
    spelunk()
  File "stack_traces.py", line 21, in spelunk
    raise ValueError('Invalid')
ValueError: Invalid

Solution 5
==========
A condition most likely failed in the spelunk() method, with the exception being thrown
originating from a try: except: ValueError: block

I would jump to line 21 first.


Traceback Problem 6
===================
Traceback (most recent call last):
  File "stack_traces.py", line 36, in run_trace
    f()
  File "stack_traces.py", line 50, in <lambda>
    run_trace(6, lambda: comp_calc([1, 2, 3], 1, add))
  File "stack_traces.py", line 30, in comp_calc
    return [perform_calculation(calc, x_i, y_i) for x_i, y_i in zip(x, y)]
TypeError: zip argument #2 must support iteration

Solution 6
==========
Zip argument #2 is not iterable. To resolve, you could recast the int 1 to a list of [1]. 
That being said, you would only be able to iterate once 
(due to argument #2 being a list with a single element). 

I would jump to line 30 first.


Traceback Problem 7
===================
Traceback (most recent call last):
  File "stack_traces.py", line 36, in run_trace
    f()
  File "stack_traces.py", line 51, in <lambda>
    run_trace(7, lambda: comp_calc([1, 2, [3]], [4, 5, 6], add))
  File "stack_traces.py", line 30, in comp_calc
    return [perform_calculation(calc, x_i, y_i) for x_i, y_i in zip(x, y)]
  File "stack_traces.py", line 30, in <listcomp>
    return [perform_calculation(calc, x_i, y_i) for x_i, y_i in zip(x, y)]
  File "stack_traces.py", line 8, in perform_calculation
    calc(x, y)
  File "stack_traces.py", line 12, in add
    return x + y
TypeError: can only concatenate list (not "int") to list

Solution 7
==========
There are two iterables, both utilizing zip(), and attempting to
iteratively add values from y (list) to x (also a list).
You end up with a type mismatch between the third element of y (int)
and the third element of x (nested list). 

I would jump to line 51 first.
 

Traceback Problem 8
===================
Traceback (most recent call last):
  File "stack_traces.py", line 36, in run_trace
    f()
  File "stack_traces.py", line 52, in <lambda>
    run_trace(8, lambda: calc_dict({'one': 1, 'two': '2'}, 'one', 'two', add))
  File "stack_traces.py", line 26, in calc_dict
    return perform_calculation(calc, d[k1], d[k2])
  File "stack_traces.py", line 8, in perform_calculation
    calc(x, y)
  File "stack_traces.py", line 12, in add
    return x + y
TypeError: unsupported operand type(s) for +: 'int' and 'str'

Solution 8
==========
There is a type mismatch between the dict keys 'one' and 'two' values.
The value of 'one' is an int, but the value of 'two' is a string,
so you recieve the TypeError when attempting to add them together.

I would jump to line 52 first.


Traceback Problem 9
===================
Traceback (most recent call last):
  File "stack_traces.py", line 36, in run_trace
    f()
  File "stack_traces.py", line 53, in <lambda>
    run_trace(9, lambda: calc_dict({}, 'one', 'two', add))
  File "stack_traces.py", line 26, in calc_dict
    return perform_calculation(calc, d[k1], d[k2])
KeyError: 'one'

Solution 9
==========
calc_dict{} is an empty dictionary with no key:value pairs; it throws a KeyError when attempting
to look up the key 'one'.

I would jump to line 53 first.


